<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="DELL" ignored="0" name="TestFF" tests="3" failures="0" timestamp="14 Dec 2017 15:38:07 GMT" time="0.081" errors="0">
  <testcase name="@BeforeMethod openApplication" time="0.0" classname="generic.BaseTest">
    <failure type="org.testng.TestNGException" message="
Can inject only one of &amp;lt;ITestContext, XmlTest, Method, Object[], ITestResult&amp;gt; into a @BeforeMethod annotated openApplication.
For more information on native dependency injection please refer to http://testng.org/doc/documentation-main.html#native-dependency-injection">
      <![CDATA[org.testng.TestNGException: 
Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @BeforeMethod annotated openApplication.
For more information on native dependency injection please refer to http://testng.org/doc/documentation-main.html#native-dependency-injection
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
... Removed 16 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod openApplication -->
  <testcase name="@AfterMethod closeApplication" time="0.0" classname="generic.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApplication -->
  <testcase name="@BeforeMethod openApplication" time="0.0" classname="generic.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApplication -->
  <testcase name="@AfterMethod closeApplication" time="0.0" classname="generic.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApplication -->
  <testcase name="@BeforeMethod openApplication" time="0.0" classname="generic.BaseTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod openApplication -->
  <testcase name="@AfterMethod closeApplication" time="0.0" classname="generic.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApplication -->
  <testcase name="testValidLogin" time="0.0" classname="script.ValidLogin">
    <skipped/>
  </testcase> <!-- testValidLogin -->
  <testcase name="testInvalidLogin" time="0.0" classname="script.InvalidLogin">
    <skipped/>
  </testcase> <!-- testInvalidLogin -->
  <testcase name="testCheckProductVersion" time="0.0" classname="script.CheckProductVersion">
    <skipped/>
  </testcase> <!-- testCheckProductVersion -->
</testsuite> <!-- TestFF -->
